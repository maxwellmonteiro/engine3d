// Engine3d.cpp : Este arquivo contém a função 'main'. A execução do programa começa e termina ali.
//

#include<GL/glew.h>
#include <GLFW/glfw3.h>

#include <iostream>
#include <map>
#include <chrono>
#include <stdio.h>
#include <stdlib.h>
#include <string>

#define WIDTH 1280
#define HEIGHT 720
#define WINDOW_TITLE "Engine 3d"

struct key {
	bool cur, prev;
};

GLFWwindow* window;
GLFWmonitor* monitor;

bool running;
bool fullscreen;

std::map<int, key> keyMap;

static const struct
{
	float x, y;
	float r, g, b;
} vertices[3] =
{
	{ -0.6f, -0.4f, 1.f, 0.f, 0.f },
	{  0.6f, -0.4f, 0.f, 1.f, 0.f },
	{   0.f,  0.6f, 0.f, 0.f, 1.f }
};

void showFPS(double timeElapsed) {
	char snewTitle[255];
	double fps = 1.0f / timeElapsed;
	sprintf_s(snewTitle, "%s FPS: %3.2f\n", WINDOW_TITLE, fps);
	//glfwSetWindowTitle(window, snewTitle);
	std::cout << snewTitle;
}

void update(double timeElapsed) {
	
}

void input() {
	glfwPollEvents();
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS) {
		running = false;
		glfwSetWindowShouldClose(window, 1);
	}
	if (glfwGetKey(window, GLFW_KEY_F) == GLFW_PRESS && keyMap[GLFW_KEY_F].prev) {
		if (!fullscreen) {
			glfwSetWindowMonitor(window, monitor, 0, 0, WIDTH, HEIGHT, 0);
		} else {
			glfwSetWindowMonitor(window, NULL, 0, 0, WIDTH, HEIGHT, 0);
		}
		fullscreen = !fullscreen;
	}
	keyMap[GLFW_KEY_F].prev = glfwGetKey(window, GLFW_KEY_F);
}

void draw() {
	glClear(GL_COLOR_BUFFER_BIT);

	gldraw
	glDrawArrays(GL_TRIANGLES, 0, 3);

	glfwSwapBuffers(window);
}


int main() {
	glfwWindowHint(GLFW_SAMPLES, 4);
	glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);

	if (!glfwInit()) {
		fprintf(stderr, "Fail to init GLFW");
		exit(EXIT_FAILURE);
	}

	window = glfwCreateWindow(WIDTH, HEIGHT, WINDOW_TITLE, NULL, NULL);
	if (window == NULL) {
		std::cout << "Failed to create window" << std::endl;
		glfwTerminate();
		exit(EXIT_FAILURE);
	}

	glfwMakeContextCurrent(window);
	monitor = glfwGetPrimaryMonitor();

	running = true;
	fullscreen = false;

	double lastTime = 0.0;
	double time, elapsedTime;

	glfwSwapInterval(0);
	while (running) {
		time = glfwGetTime();
		elapsedTime = time - lastTime;
		lastTime = time;		
			
		draw();	
		update(elapsedTime);
		input();		

		showFPS(elapsedTime);
	}

	glfwDestroyWindow(window);
	glfwTerminate();
}



